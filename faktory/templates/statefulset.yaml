apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ include "faktory.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "faktory.name" . }}
    helm.sh/chart: {{ include "faktory.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "faktory.fullname" . }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "faktory.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "faktory.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      terminationGracePeriodSeconds: 10
      shareProcessNamespace: true
      {{- include "faktory.imagePullSecrets" . | indent 6 }}
      containers:
        - name: config-watcher
          image: pstauffer/inotify:stable
          securityContext:
            capabilities:
              add:
              - SYS_PTRACE
          command:
            - sh
            - -c
            - |
              CURPATH=/etc/faktory/conf.d

              inotifywait -mr --timefmt '%d/%m/%y %H:%M' --format '%T %w %f' \
              -e close_write /tmp/test | while read date time dir file; do

                    FILECHANGE=${dir}${file}
                    # convert absolute path to relative
                    FILECHANGEREL=`echo "$FILECHANGE" | sed 's_'$CURPATH'/__'`

                    kill -HUP faktory
                    echo "At ${time} on ${date}, file $FILECHANGE triggered a reload."
              done
          volumeMounts:
            - name: {{ include "faktory.fullname" . }}-configs
              mountPath: /etc/faktory/conf.d
        - name: {{ .Chart.Name }}
          image: "{{ include "faktory.image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /faktory
            - -b
            - :7419
{{- if .Values.ui.enabled }}
            - -w
            - :7420
{{- end }}
{{- if .Values.license }}
            - -e
            - production
{{- end }}
          env:
            - name: FAKTORY_PASSWORD
              valueFrom:
                secretKeyRef:
{{- if .Values.passwordExistingSecret }}
                  name: {{ .Values.passwordExistingSecret.name }}
                  key: {{ .Values.passwordExistingSecret.key }}
{{- else }}
                  name: {{ include "faktory.name" . }}
                  key: password
{{- end }}
{{- if .Values.license }}
            - name: FAKTORY_LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ include "faktory.name" . }}
                  key: license
{{- end }}
          ports:
            - containerPort: 7419
              name: server
              protocol: TCP
{{- if .Values.ui.enabled }}
            - containerPort: 7420
              name: ui
{{- end }}
{{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: server
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
{{- end }}
{{- if .Values.readinessProbe.enabled }}
          # readinessProbe:
          #   httpGet:
          #     path: /stats
          #     port: ui
          #     httpHeaders:
          #       - name: Authorization
          #         value: Basic abc=
          #   initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          #   periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          #   timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          #   successThreshold: {{ .Values.readinessProbe.successThreshold }}
          #   failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
{{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/faktory
              # @TODO does this ^ need to be chowned / RunAs / fsGroup
            - name: {{ include "faktory.fullname" . }}-configs
              mountPath: /etc/faktory/conf.d
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ include "faktory.fullname" . }}-configs
          configMap:
            name: {{ include "faktory.fullname" . }}
{{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
{{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
{{- end }}
{{- else if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
{{- else if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "faktory.storageClass" . }}
{{- end }}
